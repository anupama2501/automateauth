name: Multi-Job CI

on: [push]

jobs:
  run-system-tests:
    name: run-system-tests (${{ matrix.suite }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJson(vars.TESTS_TEST) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Run tests and capture output
        run: |
          go test -timeout 5000s -v ./tests/suite/${{ matrix.suite }}/... | tee test-${{ matrix.suite }}.log
          exit ${PIPESTATUS[0]}

      - name: Upload test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-log-${{ matrix.suite }}
          path: test-${{ matrix.suite }}.log

  report:
    name: report
    runs-on: ubuntu-latest
    needs: run-system-tests
    if: always()
    env:
      SUITE_OWNERS: ${{ vars.TEST_CODE_OWNERS }}
    steps:
      - name: Download all test logs
        uses: actions/download-artifact@v4
        with:
          path: test-logs

      - name: Notify owners of failed suites
        run: |
          echo "Notifying owners of failed test suites:"

          for file in test-logs/**/test-*.log; do
            suite_name=$(basename "$file" | sed 's/^test-\(.*\)\.log$/\1/')
            if grep -q "^FAIL" "$file"; then
              echo "::group::Failed suite $suite_name"
              echo "Suite '$suite_name' failed."

              owners=$(echo "$SUITE_OWNERS" | jq -r --arg suite "$suite_name" '.[$suite] | join(" ")')

              if [[ -z "$owners" || "$owners" == "null" ]]; then
                echo "⚠️ No owners configured for suite '$suite_name'."
              else
                mentions=$(echo $owners | sed 's/\([^ ]\+\)/@\1/g')
                echo "Notifying owners: $mentions"
                # Add notification logic here if needed
              fi

              echo "::endgroup::"
            fi
          done

name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review-pr:
    if: github.event.pull_request.user.login == 'anupama2501'

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3


      # Step 2: Get the list of changed files and lines
      - name: Get changed files and lines
        id: file-changes
        run: |
          git fetch origin main
          > structured_changes.txt

          while IFS= read -r file; do
            echo "Processing $file..."
            # Get the diff content
            diff_content=$(git diff origin/main -- "$file")
            echo "$file: $diff_content" >> structured_changes.txt
  
            # Check if the file is a Go file
            if [[ "$file" == *.go ]]; then
                # Check formatting with gofmt
                format_issues=$(gofmt -l "$file")
                if [[ -n "$format_issues" ]]; then
                  echo "$file: NOT FORMATTED" >> structured_changes.txt
                else
                  echo "$file: FORMATTED" >> structured_changes.txt
                fi
            fi
          done < <(git diff --name-only origin/main)
      # Step 3: Run the PR review script
      - name: Run PR Review Script
        run: |
          python3 .github/scripts/pr_review.py structured_changes.txt
      - name: Debug - Check JSON Output
        run: |
          if [ -f review_notes.json ]; then
            echo "review_notes.json found:"
            cat review_notes.json
          else
           echo "review_notes.json not found!"
           exit 1
          fi

      - name: Debug Event Payload
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            console.log("Event Payload:", JSON.stringify(context.payload, null, 2));

      # - name: List PR Files
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN}}
      #     script: |
      #       const listFiles = async () => {
      #         const prFiles = await github.rest.pulls.listFiles({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: context.payload.pull_request.number,
      #         });
      #         const fileList = prFiles.data.map(file => ({
      #           filename: file.filename,
      #           patch: file.patch
      #         }));
      #         console.log("Files in PR:", JSON.stringify(fileList, null, 2));
      #       };
      #       listFiles();

      # - name: Debug Diff for Specific File
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       const prFiles = await github.rest.pulls.listFiles({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.payload.pull_request.number,
      #       });
      #       prFiles.data.forEach(file => {
      #         if (file.filename === "golangWorkflowTest/rbac_test.go") {
      #           console.log("Diff for file:", file.patch);
      #         }
      #       });

      # - name: Post comments
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       github.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.payload.pull_request.number,
      #         body: "Test comment",
      #         path: "golangWorkflowTest/rbac_test.go",
      #         line: 10,
      #         side: "RIGHT",
      #       });

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Test comment"
            })`

      # # Step 4: Post inline comments
      # - name: Post inline review comments
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       const fs = require('fs');
      #       const diffContent = process.env.DIFF_CONTENT;
      #       const reviewNotes = fs.readFileSync('review_notes.json', 'utf8');
      #       const issues = JSON.parse(reviewNotes);
      #         github.issues.createComment({
      #           issue_number: ${{ github.event.number }},
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: context.payload.pull_request.number,
      #           body: issue.comment,
      #           path: issue.file,
      #           line: issue.line,
      #           side: 'RIGHT' // Comment on the right side of the diff
      #         });
      #       });

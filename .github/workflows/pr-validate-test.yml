name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review-pr:
    if: github.event.pull_request.user.login == 'anupama2501'

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3


      # Step 2: Get the list of changed files and lines
      - name: Get changed files and lines
        id: file-changes
        run: |
          git fetch origin main
          > structured_changes.txt

          while IFS= read -r file; do
            echo "Processing $file..."
            # Get the diff content
            diff_content=$(git diff origin/main -- "$file")
            echo "$file: $diff_content" >> structured_changes.txt
  
            # Check if the file is a Go file
            if [[ "$file" == *.go ]]; then
                # Check formatting with gofmt
                format_issues=$(gofmt -l "$file")
                if [[ -n "$format_issues" ]]; then
                  echo "$file: NOT FORMATTED" >> structured_changes.txt
                else
                  echo "$file: FORMATTED" >> structured_changes.txt
                fi
            fi
          done < <(git diff --name-only origin/main)

      # Step 3: Run the PR review script
      - name: Run PR Review Script
        run: |
          python3 .github/scripts/pr_review.py structured_changes.txt
      - name: Debug - Check JSON Output
        run: |
          if [ -f review_notes.json ]; then
            echo "review_notes.json found:"
            cat review_notes.json
          else
           echo "review_notes.json not found!"
           exit 1
          fi

      - name: List PR Files
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const fileList = prFiles.data.map(file => ({
              filename: file.filename,
              patch: file.patch
            }));
            console.log("Files in PR:", JSON.stringify(fileList, null, 2));


      # Step 4: Post inline comments
      - name: Post inline review comments
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');

            const reviewNotes = fs.readFileSync('review_notes.json', 'utf8');
            const issues = JSON.parse(reviewNotes);

            const prFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const fileList = prFiles.data.map(file => file.filename);

            console.log("Files in PR:", fileList);

            // Post comments for each issue
            issues.forEach(issue => {
              if (!fileList.includes(issue.path)) {
                console.error(`File not found in PR diff: ${issue.path}`);
              } else {
                console.log(`Posting comment for file: ${issue.path}, line: ${issue.line}`);
                github.rest.pulls.createReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  body: issue.comment,
                  path: issue.path,
                  line: issue.line,
                  side: 'RIGHT',
                }).catch(error => {
                  console.error("Error posting comment:", error);
                });
              }
            });
